(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{114:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),n("blockquote",[n("p",[t._v("在 Google 和 Github 上面找了一圈，发现有 SCSS 和 Less 的转换工具，但就是没有 Stylus 的转换工具。当时心里在想：要不我自己去写这个工具吧？感觉这个好像很难啊，我能做出来吗？不管了先试试吧。于是 "),n("strong",[n("a",{attrs:{href:"https://github.com/txs1992/stylus-converter",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylus-converter"),n("OutboundLink")],1)]),t._v(" 这个项目就这样诞生了，只需要执行一条命令就可以将 stylus 转换成 SCSS。目前工具已完成 Stylus 到 SCSS 的转换，下一步会添加 Stylus 到 Less 的转换。")])]),t._m(4),t._m(5),t._m(6),n("p",[t._v("经过上面几个步骤，vue-sell 中的 Stylus 源码已经被转换完成了 SCSS，其中转换的工作只用到 stylus-converter 的只有一条简单的命令而已。")]),t._m(7),t._m(8),t._m(9),n("p",[t._v("最开始的时候想到的是用正则将 Stylus 转换成 SCSS，当时觉得这个工作应该很简单，将 Stylus 转换成 SCSS 只需要给代码尾部加上分号和大括号就可以了。然后花了两天业余时间也没写出 demo，因为后来发现不仅仅只是在尾部价格分号以及大括号这么简单，它们有很多语法是不一样的。例如 Stylus 在定义以及调用 Mixin 和 Function 是一样的。而 SCSS 在定义 Mixin 以及调用 Mixin 的时候语法都是不一样的所以最终还是放弃了使用正则来处理这个任务，后面的篇幅会详细介绍转换中遇到的问题。")]),t._m(10),n("p",[t._v("在放弃正则之后就在想到底应该怎么去处理 Stylus 呢？一次在和同事的交流中，同事建议让我看看 AST 和 PostCSS。")]),n("p",[t._v("首先我们先简单了解一下什么是 AST，AST 中文是抽象语法树，是源代码的一种抽象表示，它以树状结构表现源代码的语法结构，简单来说就是将源代码解析成我们可以处理的数据结构。")]),n("p",[t._v("再来看看 PostCSS，PostCSS 就是提供了使用 JavaScript 代码处理 CSS 的工具，PostCSS 有两个主要的功能。")]),t._m(11),n("p",[t._v("试用了一下发现 PostCSS 并不能将 Stylus 转换成 AST，因为无法解析 Stylus 语法。")]),t._m(12),n("p",[t._v("不过在查看 PostCSS 仓库的时候以外发现了一个 PostStylus 的插件，PostStylus 是一个处理 Stylus 的 PostCSS 适配器，PostStylus 可以拿到 Stylus 编译后的 CSS 源码，但是却无法获取 Stylus 的语法树。有些好奇 PostStylus 是如何获取到 CSS 源码，接下来让我们看看 PostStylus 以及 Stylus 的源码。")]),t._m(13),n("p",[t._v("我们来看看 PostStylus 是如何得到 CSS 的 AST 对象，经过了哪些步骤？")]),t._m(14),n("p",[t._v("从上面的步骤中我们可看出 PostStylus 如果处理 Stylus，最重要的是我们知道了如何获取 Stylus 的 AST 对象，\n通过调用 Parser 实例的 parse() 方法能获取到 Stylus 的 AST 对象。既然我们已经可以得到 Stylus 的 AST 对象了，那么接下来就是如何处理 AST 了。")]),t._m(15),n("p",[t._v("关于 Stylus 转换成 AST 有哪些节点，可以在"),n("a",{attrs:{href:"https://github.com/stylus/stylus/tree/dev/lib/nodes",target:"_blank",rel:"noopener noreferrer"}},[t._v("nodes 文件夹"),n("OutboundLink")],1),t._v("中查看，这里就不一一描述了，接下来说说在转换 AST 的时候遇到了哪些问题，以及如何去解决这些问题，在开始前，先给大家看看转换后的 AST 是怎么样的。")]),t._m(16),t._m(17),t._m(18),t._m(19),n("p",[t._v("处理这些很简单，先从换行开始，每个节点中都有一个 lineno 属性，表示当前节点所在的行，我们只需要使用 oldLineno 变量去记录这个值就好了，oldLineno 默认值是1，每次将节点的 lineno - oldLineno 就能得到换行的数值。")]),t._m(20),n("p",[t._v("处理花括号和缩进一样，也是根据 Block 节点，我们只需要在这个节点的开头后结尾分别加上两个花括号就可以了。")]),t._m(21),n("p",[t._v("先对比一下 Stylus 与 SCSS 的循环语法有什么不同之处")]),t._m(22),n("p",[t._v("从上面的代码我们可以看出 SCSS 循环的语法有三种，分别是：")]),n("ol",[n("li",[n("code",[t._v("@for")]),t._v(" <变量名> "),n("code",[t._v("from")]),n("start",[n("code",[t._v("through")]),n("end")],1)],1),n("li",[n("code",[t._v("@for")]),t._v(" <变量名> "),n("code",[t._v("from")]),n("start",[n("code",[t._v("to")]),n("end")],1)],1),t._m(23)]),t._m(24),t._m(25),t._m(26),n("p",[t._v("这时候我们会发现转换后的 "),n("code",[t._v("1..5")]),t._v(" 这种语法 SCSS 不支持，怎么办？细心的同学可能已经发现了，Stylus 的 "),n("code",[t._v("1..5")]),t._v(" 这种形式和 SCSS 的 "),n("code",[t._v("1 through 5")]),t._v(" 得到的结果是一样的，所以我们在转换后再做一次判断，如果转换后的代码中包含 "),n("code",[t._v("..")]),t._v(" 我们再将其转换成 "),n("code",[t._v("@for")]),t._v(" <变量名> "),n("code",[t._v("from")]),n("start",[n("code",[t._v("through")]),n("end",[t._v(" 这种形式。")])],1)],1),t._m(27),n("p",[t._v("这样 Stylus 的循环语法都已经转换完了，至于 "),n("code",[t._v("@for")]),t._v(" <变量名> "),n("code",[t._v("from")]),n("start",[n("code",[t._v("to")]),n("end",[t._v(" 这种形式，Stylus 中并没有相似的功能，所以我们直接抛弃就好了。")])],1)],1),t._m(28),n("p",[t._v("在 Stylus 中 Funcation 与 Mixin 的定义已经执行都是一样的语法，并且 Stylus 会将它们都解析成 Function 节点。而在 SCSS 中两种语法的定义以及使用都是不一样的，我们来看看下面两种语法的对比。")]),t._m(29),t._m(30),t._m(31),n("p",[t._v("上面的观念是我个人的总结，不一定是最佳方案，如果你有更好的解决方案，可以给我提 issue，谢谢。")]),t._m(32),t._m(33),t._m(34),n("p",[t._v("上面列举了四种类型的转换，由于时间与篇幅的原因，这里就不一一详细叙述了，其他的类型转换相对来说都比较简单，有复杂的对比上面四种方案，应该都可以解决。")]),t._m(35),n("p",[t._v("代码转换的功能完成了，接下来就可以发布了，等等好像还漏了点什么？如果使用这个工具好像还得自己写代码处理文件，用起来好麻烦啊，所以我希望能和 webpack 一样，执行 webpack "),n("entry",[n("outpu",[t._v(" 就可以得到我想要的结果了，这对用户来说学习成本几乎为零，且使用方便。好吧！那就给它加上 CLI 的功能吧。")])],1)],1),t._m(36),t._m(37),t._m(38),t._m(39),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/tj/commander.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("commander"),n("OutboundLink")],1),t._v(" 提供用户命令行输入和参数解析功能")]),n("li",[n("a",{attrs:{href:"https://github.com/substack/node-optimist",target:"_blank",rel:"noopener noreferrer"}},[t._v("optimist"),n("OutboundLink")],1),t._v(" 获取命令行参数解析")]),n("li",[n("a",{attrs:{href:"https://github.com/sindresorhus/ora",target:"_blank",rel:"noopener noreferrer"}},[t._v("ora"),n("OutboundLink")],1),t._v(" 命令行交互功能，例如从 loading 到 success 的状态")])]),t._m(40),t._m(41),t._m(42),t._m(43),n("p",[t._v("在开发这个项目的过程中，我学习到了很多以前以前没有了解过的知识，例如 AST、可执行脚本，用了一些命令行交互的工具，查看了两个项目的源码。最大的感触就是坚持，是的，在没有做这个项目之前，一直觉得转换语法是一件很高大上的事情，也从没想过我可以做出来。希望这篇文章能够给你带来提升，最后如果您觉得这篇文章对您有用，或是这个工具正好可以帮助到您，请给我的 "),n("strong",[n("a",{attrs:{href:"https://github.com/txs1992/stylus-converter",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylus-converter"),n("OutboundLink")],1)]),t._v(" 加个 "),n("code",[t._v("star")]),t._v(" 谢谢。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"从零开始写个-stylus-转换器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从零开始写个-stylus-转换器","aria-hidden":"true"}},[this._v("#")]),this._v(" 从零开始写个 Stylus 转换器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景","aria-hidden":"true"}},[this._v("#")]),this._v(" 背景")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("刚进公司的时候还没有学过什么预编译 CSS，在网上查了一下感觉 Stylus 代码简洁，功能强大，所以在第一个项目中就用了 Stylus。随着时间的推移，后面的项目渐渐的改用了团队成员使用较多的 SCSS，前段时间需要维护那个老项目，用习惯了 SCSS 之后对 Stylus 的缩进语法有些别扭。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("由于我所在的团队都是使用 SCSS 进行开发，如果别人去维护这个项目，估计还需要点时间去适应 Stylus，从团队角度来说不易于维护。于是就准备将这个项目替换成 SCSS，但是如果手动去转换 Stylus 浪费时间，出错率比较大，而且这种工作只是一次性的。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用示例","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用示例")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("你说了那么多，但是我需要知道你这个工具是否好用，你得拿出实锤让我们看看，如果工具不好用，我才不要浪费时间去学习。好吧，既然各位已经提出意见了，那就满足各位的要求。不知道各位知不知道前两年有个非常火的仿饿了么 APP 的项目，我曾在网上看过这个项目的代码，其中就用到了 Stylus，那我们就用 vue-sell 来试验一波（已经经过 ustbhuangyi 同意），废话不多说直接开干。")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 先下载 stylus-converter")]),t._v("\nnpm install "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("g stylus"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("converter\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// clone vue-sell 项目")]),t._v("\ngit clone git@github"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ustbhuangyi"),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("vue"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("sell"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 进入 vue-sell 项目目录")]),t._v("\ncd vue"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("sell\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 下载项目依赖")]),t._v("\nnpm install\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 修改文件夹")]),t._v("\nmv src src"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("temp\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 将目录中的所有 stylus 转换为 scss")]),t._v("\nstylus"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("conver "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("d yes "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("i src"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("temp "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("o src\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 进入 src 目录，打开 main.js 文件")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 将 import 'common/stylus/index.styl';")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 改为 import 'common/stylus/index.scss';")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 下载 loader")]),t._v("\nnpm instll "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("d node"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("sass sass"),n("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("loader\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 嗯！项目已经转换完成，让我们运行一下吧")]),t._v("\nnpm run dev\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"如何转换-stylus-源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何转换-stylus-源码","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何转换 Stylus 源码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("看完示例我们已经知道如何去使用这个工具了，但既然标题是"),s("strong",[this._v("从零开始写个 Stylus 转换器")]),this._v("，那我们就来说说如何去实现这个工具，首先我们要解决的问题就是如何去转换 Stylus 的源码。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"使用正则来转换代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用正则来转换代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用正则来转换代码")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"postcss-与-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#postcss-与-ast","aria-hidden":"true"}},[this._v("#")]),this._v(" PostCSS 与 AST")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[this._v("将 CSS 源码转换成 CSS 抽象语法树 AST")]),s("li",[this._v("调用插件来处理语法树并得到结果")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"poststylus-与-stylus"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#poststylus-与-stylus","aria-hidden":"true"}},[this._v("#")]),this._v(" PostStylus 与 Stylus")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* PostStylus 源码一部分 */")]),t._v("\nmodule"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugins"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" warnFn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    style"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("on")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'end'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 调用 PostCSS 处理 CSS 源码，并调用相关插件。")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("/* Stylus 仓库的 renderer.js 代码中的一部分 */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Renderer")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  options "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 处理参数...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nRenderer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function-variable function"}},[t._v("render")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parser "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parser "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Parser")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// use plugin(s)")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("use")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("use"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 将 stylus 源码解析成 ast。")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parser"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("parse")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 对 stylus ast 做些处理 ...")]),t._v("\n\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token class-name"}},[t._v("err")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 获取 end 事件的函数数组")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" listeners "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("listeners")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'end'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" listeners"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" listeners"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ret "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" listeners"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" css"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" css "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" css\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nRenderer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function-variable function"}},[t._v("use")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("我们在 webpack 或 glup 中调用 Stylus CLI，将 PostStylus 当做配置项的一个插件传入，并创建一个 Renderer 实例")]),n("li",[t._v("执行 Renderer 实例的 "),n("code",[t._v("render")]),t._v(" 函数，遍历 "),n("code",[t._v("options.use")]),t._v(" 数组，并调用实例的 "),n("code",[t._v("use")]),t._v(" 方法并传入 PostStylus 插件")]),n("li",[t._v("以 Renderer 实例调用 PostStylus 插件方法，并将当前实例("),n("code",[t._v("this")]),t._v(")作为参数传入")]),n("li",[t._v("执行 PostStylus 返回的匿名函数，在 Renderer 实例中注册 "),n("code",[t._v("end")]),t._v(" 事件")]),n("li",[t._v("继续执行 "),n("code",[t._v("render")]),t._v(" 函数代码，调用 Parser 实例并调用 "),n("code",[t._v("parse")]),t._v(" 方法得到 Stylus AST 对象")]),n("li",[t._v("处理 AST 对象，获取 "),n("code",[t._v("end")]),t._v(" 事件的函数数组，遍历数组调用函数，传入已经处理完的 CSS 源码")]),n("li",[t._v("执行 PostStylus 调用 PostCSS 转换 CSS 源码，并调用插件处理")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"处理-ast"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理-ast","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理 AST")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("/* nodes/selector */\nSelector.prototype.toJSON = function () {\n  return {\n    __type: 'Selector',\n    inherits: this.inherits,\n    segments: this.segments,\n    optional: this.optional,\n    val: this.val,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  }\n}\n\n/* nodes/block */\nBlock.prototype.toJSON = function() {\n  return {\n    __type: 'Block',\n    scope: this.scope,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename,\n    nodes: this.nodes\n  }\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面一段代码是 Selector 节点对象和 Block 节点对象的 "),s("code",[this._v("toJSON")]),this._v(" 方法，我们来看看两个节点对象相同的的属性有哪些。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("code",[this._v("__type")]),this._v(" 属性表示节点的类型，我们可以针对不同的类型调用不同的处理方法")]),s("li",[s("code",[this._v("lineno")]),this._v(" 属性表示节点在源码中的行数，根据这个属性来判断是否需要换行")]),s("li",[s("code",[this._v("column")]),this._v(" 属性表示节点在源码中的列数，前期我根据这个属性来处理缩进，后来发现根据 Block 节点处理缩进更方便")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"处理换行缩进与花括号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理换行缩进与花括号","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理换行缩进与花括号")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("处理缩进，Stylus 中 Block 节点表示代码块，首先我们用一个 "),s("code",[this._v("indentationLevel")]),this._v(" 变量来表示缩进等级，这个变量默认值是 0，每次遇到 Block 节点的时候将这个变量加一，在处理完 Block 节点的时候讲这个变量减一。为什么要这么做，因为节点是可以嵌套的，一个 Block 节点中可能嵌套着无数个 Block 以及其他节点，然后按照自己喜欢将这个变量乘以 2 或 4，再填充空格就得到缩进了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"处理循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理循环","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理循环")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-scss extra-class"},[n("pre",{pre:!0,attrs:{class:"language-scss"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* stylus */")]),t._v("\ndiv\n  for str in 1 2 3 4 5\n    bar str\n  for num in 1..5\n    foo num\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("/* scss */")]),t._v("\n"),n("span",{attrs:{class:"token selector"}},[t._v("div ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("@for")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$num")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" 1 "),n("span",{attrs:{class:"token keyword"}},[t._v("through")]),t._v(" "),n("span",{attrs:{class:"token selector"}},[t._v("5 ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v("foo")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$num")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("@for")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$index")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token selector"}},[t._v("1 to 5 ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$index")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("@each")]),t._v(" "),n("span",{attrs:{class:"token selector"}},[n("span",{attrs:{class:"token variable"}},[t._v("$str")]),t._v(" in 1, 2, 3, 4, 5 ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v("bar")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$str")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("code",[this._v("@each")]),this._v(" <变量名> "),s("code",[this._v("in")]),this._v(" <表达式>")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而 Stylus 的循环语法都是 "),s("code",[this._v("for")]),this._v(" <变量名> "),s("code",[this._v("in")]),this._v(" <表达式>，那么怎么将 Stylus 转换成 SCSS 呢？")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先我们来对比一下共性，Stylus 的 "),n("code",[t._v("for")]),t._v(" <变量名> "),n("code",[t._v("in")]),t._v(" <表达式> 和 SCSS 的 "),n("code",[t._v("@each")]),t._v(" <变量名> "),n("code",[t._v("in")]),t._v(" <表达式> 的形式是一样的，所以我们可以先将 Stylus 中的 "),n("code",[t._v("for")]),t._v(" 语法全部转换下面这样。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-scss extra-class"},[n("pre",{pre:!0,attrs:{class:"language-scss"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* stylus */")]),t._v("\nfor str in 1 2 3 4 5\n  bar str\nfor num in 1..5\n  foo num\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("/* scss */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("@each")]),t._v(" "),n("span",{attrs:{class:"token selector"}},[n("span",{attrs:{class:"token variable"}},[t._v("$str")]),t._v(" in 1 2 3 4 5 ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v("bar")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$str")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("@each")]),t._v(" "),n("span",{attrs:{class:"token selector"}},[n("span",{attrs:{class:"token variable"}},[t._v("$num")]),t._v(" in 1..5 ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v("foo")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$num")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-javascrip extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("// 转换前\nfor num in 1..5\n  foo num\n\n// 转换后\n@each $num in 1..5 {\n  foo: $num;\n}\n\n// 包含 `..` 进行二次转换\nif (/\\.\\./.test(converText)) {\n  converText = converText.replace('@each', '@for').replace('..', 'through').replace('in', 'from')\n}\n\n// 最终结果\n@for $num from 1 through 5 {\n  foo: $num;\n}\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"处理-function-与-mixin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理-function-与-mixin","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理 Function 与 Mixin")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-scss extra-class"},[n("pre",{pre:!0,attrs:{class:"language-scss"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* stylus 语法 */")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("border-radius")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v("border-radius")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n\n"),n("span",{attrs:{class:"token function"}},[t._v("add")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a, b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  a "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n\nbutton\n  width "),n("span",{attrs:{class:"token function"}},[t._v("add")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("5px, 10px"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("border-radius")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("5px"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n "),n("span",{attrs:{class:"token comment"}},[t._v("/* scss 语法 */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("@mixin")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("border-radius")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token variable"}},[t._v("$val")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v("border-radius")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$val")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("@function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("add")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token variable"}},[t._v("$a")]),t._v(", "),n("span",{attrs:{class:"token variable"}},[t._v("$b")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("@return")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$a")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$b")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{attrs:{class:"token selector"}},[t._v("button ")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v("width")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("add")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("5px, 10px"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("@include")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("border-radius")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("5px"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("前面说到 Stylus 的 Function 和 Mixin 都会被解析成 Function 节点，那我们首先要解决的问题就是要知道谁是 Function 谁是 Mixin。当时做到这里差点就放弃了，不过还是找到了突破点，我们发现 Mixin 中是包含了 CSS 相关的语法的，所以我们判断一下 Function 的子节点中是否包含 CSS 相关的节点，如果有那么它就是 Mixin。然后判断一下如果是 Mixin 前面就加上 "),s("code",[this._v("@mixin")]),this._v(" 如果是 Function 前面就加上 "),s("code",[this._v("@function")]),this._v(" 然后在 Block 节点中添加 "),s("code",[this._v("@return")]),this._v("， 就这样定义的部分已经解决了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们来看看调用的部分，Function 或者 Mixin 的调用，在 Stylus 中都被解析成 Call 节点。不过有了之前的处理定义的经验，我们在调用的地方也可以去借鉴。我们发现在 Stylus 中如果是 Function 它都是在 CSS 属性的后面，或者是作为参数传递，所以只要判断它不是 Property 节点的子节点，且不是一个参数，那么它就是一个 Mixin。然后在调用 Mixin 的时候前面加上 "),s("code",[this._v("@include")]),this._v("，这样调用的部分就解决了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"处理-boolean"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理-boolean","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理 Boolean")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("Stylus 的布尔运算和 JavaScript 一样，使用 "),n("code",[t._v("&&")]),n("code",[t._v("||")]),n("code",[t._v("!")]),t._v(" 等符号要表示，而 SCSS 中则是使用 "),n("code",[t._v("and")]),n("code",[t._v("or")]),n("code",[t._v("not")]),t._v(" 来表示，这个只需要在遇到 Boolean 类型的时候做一个映射转换就好了，我建了一个 Map 结构来对应他们的关系。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token constant"}},[t._v("OPEARTION_MAP")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'&&'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'and'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'!'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'not'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'||'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'or'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"添加-cli-功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加-cli-功能","aria-hidden":"true"}},[this._v("#")]),this._v(" 添加 CLI 功能")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"可执行脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可执行脚本","aria-hidden":"true"}},[this._v("#")]),this._v(" 可执行脚本")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Shebang（也称为 Hashbang ）是一个由井号和叹号构成的字符序列 "),s("code",[this._v("#!")]),this._v("，其出现在文本文件的第一行的前两个字符。当文件中存在 Shebang，操作系统会分析 Shebang 后面的内容，然后调用对应的解析器来解析文件，下面我们来写一个 node 的可执行脚本。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* 可执行脚本 bin.js */")]),t._v("\n#"),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("bin"),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("env node "),n("span",{attrs:{class:"token comment"}},[t._v("// 告诉操作系统调用 node 来解析文件")]),t._v("\n\nconsole"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("log")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Hello Node Shell !'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("/* package.json 这个文件是必须存在的 */")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v('"bin"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v('"cli-demo"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"./bin.js"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("写完上面的代码，然后执行 "),s("code",[this._v("npm run link")]),this._v("，在全局的 npm 包环境中帮我们建立一个软链。这时我们在命令行中输入 "),s("code",[this._v("cli-demo")]),this._v(" 就会输出 'Hello Node Shell !'，在我的 CLI 文件中一共使用了下面这些工具库。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"处理-vue-模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理-vue-模板","aria-hidden":"true"}},[this._v("#")]),this._v(" 处理 Vue 模板")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于我开发项目使用的都是 Vue，所以在工具中添加了对于 "),s("code",[this._v(".vue")]),this._v(" 文件的处理。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toString")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" styleReg "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token regex"}},[t._v("/<style.*>((\\n|.)*)<\\/style>/")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchs "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("match")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("styleReg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchs"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" matchs"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("converter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("matchs"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" styleText "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`<style lang="scss">')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("text"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("</style>`")])]),t._v("\n  result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("replace")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("styleReg"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" styleText"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);s.default=e.exports}}]);